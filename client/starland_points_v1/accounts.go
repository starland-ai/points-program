// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package starland_points_v1

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type UserPoints struct {
	Authority     ag_solanago.PublicKey
	Points        uint64
	LastSignature [96]uint8
	ClaimCount    uint64
}

var UserPointsDiscriminator = [8]byte{143, 246, 139, 144, 1, 217, 204, 183}

func (obj UserPoints) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserPointsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Points` param:
	err = encoder.Encode(obj.Points)
	if err != nil {
		return err
	}
	// Serialize `LastSignature` param:
	err = encoder.Encode(obj.LastSignature)
	if err != nil {
		return err
	}
	// Serialize `ClaimCount` param:
	err = encoder.Encode(obj.ClaimCount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserPoints) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserPointsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[143 246 139 144 1 217 204 183]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Points`:
	err = decoder.Decode(&obj.Points)
	if err != nil {
		return err
	}
	// Deserialize `LastSignature`:
	err = decoder.Decode(&obj.LastSignature)
	if err != nil {
		return err
	}
	// Deserialize `ClaimCount`:
	err = decoder.Decode(&obj.ClaimCount)
	if err != nil {
		return err
	}
	return nil
}
